package net.cydhra.nidhogg.data

import com.benasher44.uuid.Uuid
import com.benasher44.uuid.uuidFrom
import kotlinx.serialization.Serializable
import kotlinx.serialization.Transient

/**
 * A Yggdrasil session. It is (re-)generated by the Yggdrasil service upon calling
 * [authenticate][net.cydhra.nidhogg.YggdrasilClient.authenticate] or
 * [refresh][net.cydhra.nidhogg.YggdrasilClient.refresh]. It contains a secret [accessToken] that is required to
 * authenticate against Mojang games. A client should never store the password, just the access token. It furthermore
 * contains a secret [clientToken] that is chosen by the client and is required to call the refresh function.
 *
 * @param id the player UUID as a string without hyphenation. Call [uuid] to obtain an actual [Uuid] instance.
 * @param accessToken the session access token
 * @param clientToken the client token used to obtain the session
 */
@Serializable
data class Session(var id: String, var accessToken: String, var clientToken: String) {

    /**
     * Generate an instance of [Uuid] from the player [id]. The [Uuid] instance is generated lazily and will be
     * stored afterwards.
     */
    @Transient
    val uuid: Uuid by lazy {
        uuidFrom("${id.subSequence(0, 8)}-${id.subSequence(8, 12)}-${id.subSequence(12, 16)}" +
                "-${id.subSequence(16, 20)}-${id.subSequence(20, 32)}"
        )
    }
}
